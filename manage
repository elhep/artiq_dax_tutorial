#!/usr/bin/env python

import subprocess
import argparse
import os
import tempfile


ftdi_mapping = {
    'A': '1:5,4',
    'B': '1:5,3',
    'C': '1:5,2',
    'D': '1:5,1,1',
    'E': '1:5,1,3',
    'F': '1:5,1,2',
}

ip_mapping = {
    'A': '192.168.95.213',
    'B': '192.168.95.214',
    'C': '192.168.95.215',
    'D': '192.168.95.216',
    'E': '192.168.95.217',
    'F': '192.168.95.218',
}

serial_mapping = {}

for system, ftdi_path in ftdi_mapping.items():
    _, path = ftdi_path.split(':')
    path = path.replace(',', '.')
    serial_mapping[system] = f"/dev/serial/by-path/pci-0000:00:14.0-usb-0:{path}:1.2-port0"


# Create a subparser with command "flash"
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='command')

flash_parser = subparsers.add_parser('flash')
default_firmware_directory = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'firmware', 'qce24')
flash_parser.add_argument('--directory', '-d', type=str, default=default_firmware_directory, help="firmware directory")
flash_parser.add_argument('--system', '-s', type=str, required=True, help="which system to flash (A or B or .. F or 'all' for all)")

restart_parser = subparsers.add_parser('restart')
restart_parser.add_argument('--system', '-s', type=str, required=True, help="which system to restart (A or B or .. F or 'all' for all)")

serial_parser = subparsers.add_parser('serial')
serial_parser.add_argument('--system', '-s', type=str, required=True, help="which system to get serial from (A or B or .. F)")

device_db_parser = subparsers.add_parser('ddb')
device_db_parser.add_argument('--system', '-s', type=str, required=True, help="which system to restart (A or B or .. F or 'all' for all)")

args = parser.parse_args()

if args.command == 'flash':    
    systems = []
    if args.system == 'all':
        systems = ftdi_mapping.keys()
        ips = [ip_mapping[system] for system in systems]
    else:
        systems = [args.system]
        ips = [ip_mapping[args.system]]

    for system, ip in zip(systems, ips):
        print("\n==> Flashing system ", system, f" with ftdi location {ftdi_mapping[system]}\n")
        ftdi_path = ftdi_mapping[system]
        with tempfile.TemporaryDirectory() as tmpdirname:
            storage_path = os.path.join(tmpdirname, 'storge.img')
            subprocess.run([
                'artiq_mkfs',
                '-s', 'ip', ip,
                storage_path
            ])
            subprocess.run([
                'artiq_flash', '-t', 'kasli', 
                '-I', f'ftdi_location {ftdi_path}', 
                '-d', args.directory,
                '-f', storage_path, 
                'erase', 'gateware', 'bootloader', 'firmware', 'storage', 'start'
            ])

elif args.command == 'restart':
    systems = []
    if args.system == 'all':
        systems = ftdi_mapping.keys()
    else:
        systems = [args.system]

    for system in systems:
        print("\n==> Restarting system ", system, f" with ftdi location {ftdi_mapping[system]}\n")
        ftdi_path = ftdi_mapping[system]
        subprocess.run([
            'artiq_flash', '-t', 'kasli', 
            '-I', f'ftdi_location {ftdi_path}', 
            'start'
        ])

elif args.command == 'serial':
    system = args.system
    print(f"\n==> Serial port for system {system} under {serial_mapping[system]}\n")
    print("\nTo exit press Ctrl + C\n")
    subprocess.run(['flterm', serial_mapping[system]])

elif args.command == "ddb":
    systems = []
    if args.system == 'all':
        systems = ftdi_mapping.keys()
        ips = [ip_mapping[system] for system in systems]
    else:
        systems = [args.system]
        ips = [ip_mapping[args.system]]

    expeirments_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'experiments')
    ddb_template_path = os.path.join(expeirments_path, 'ddb_tmp.py')
    
    with open(ddb_template_path, 'r') as f:
        ddb_template = f.read()
    for system, ip in zip(systems, ips):
        with open(os.path.join(expeirments_path, f"device_db_{system.lower()}.py"), 'w') as f:
            f.write(ddb_template.replace("%%core_ip%%", ip).replace("%%system%%", system))


else:
    print("Invalid command")
    exit(1)
