#!/usr/bin/env python

import subprocess
import argparse
import os
import sys
import tempfile
from setups import *
from templates import device_db_template, scope_template


serial_mapping = {}

for system, ftdi_path in ftdi_mapping.items():
    if ftdi_path is None:
        serial_mapping[system] = "/dev/serial/by-id/usb-FTDI_Quad_RS232-HS-if02-port0"
        continue
    _, path = ftdi_path.split(':')
    path = path.replace(',', '.')
    serial_mapping[system] = f"/dev/serial/by-path/pci-0000:00:14.0-usb-0:{path}:1.2-port0"


# Create a subparser with command "flash"
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='command')

flash_parser = subparsers.add_parser('flash')
default_firmware_directory = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'firmware', 'qce24')
flash_parser.add_argument('--directory', '-d', type=str, default=default_firmware_directory, help="firmware directory")
flash_parser.add_argument('--system', '-s', type=str, required=True, help="which system to flash (A or B or .. F or X or 'all' for all)")

restart_parser = subparsers.add_parser('restart')
restart_parser.add_argument('--system', '-s', type=str, required=True, help="which system to restart (A or B or .. F or X or 'all' for all)")

serial_parser = subparsers.add_parser('serial')
serial_parser.add_argument('--system', '-s', type=str, required=True, help="which system to get serial from (A or B or .. F or X)")

device_db_parser = subparsers.add_parser('ddb')
device_db_parser.add_argument('--system', '-s', type=str, required=True, help="which system to restart (A or B or .. F or X or 'all' for all)")
device_db_parser.add_argument('--ctl-host', type=str, default="::1", required=False, help="Oscilloscope controller host")

session_parser = subparsers.add_parser('session')
session_parser.add_argument('--system', '-s', type=str, required=True, help="which system to get serial from (A or B or .. F)")
session_parser.add_argument('--master-ip', type=str, default="::1", required=False, help="Master IP address")

args = parser.parse_args()

if args.command == 'flash':    
    systems = []
    if args.system == 'all':
        systems = [system for system in ftdi_mapping.keys() if system != 'X']
        ips = [ip_mapping[system] for system in systems]
    else:
        systems = [args.system]
        ips = [ip_mapping[args.system]]

    for system, ip in zip(systems, ips):
        ftdi_path = ftdi_mapping[system]
        print("\n==> Flashing system ", system, f" with ftdi location {ftdi_path}\n")
        with tempfile.TemporaryDirectory() as tmpdirname:
            storage_path = os.path.join(tmpdirname, 'storge.img')
            subprocess.run([
                'artiq_mkfs',
                '-s', 'ip', ip,
                storage_path
            ])
            cmd = [
                'artiq_flash', '-t', 'kasli', 
                '-d', args.directory,
                '-f', storage_path, 
                'erase', 'gateware', 'bootloader', 'firmware', 'storage', 'start'
            ]
            if ftdi_path is not None:
                cmd = [cmd[0], '-I', f'ftdi_location {ftdi_path}'] + cmd[1:]
            print(cmd)
            subprocess.run(cmd)

elif args.command == 'restart':
    systems = []
    if args.system == 'all':
        systems = [system for system in ftdi_mapping.keys() if system != 'X']
    else:
        systems = [args.system]

    for system in systems:
        print("\n==> Restarting system ", system, f" with ftdi location {ftdi_mapping[system]}\n")
        ftdi_path = ftdi_mapping[system]
        cmd = [
            'artiq_flash', '-t', 'kasli',
            'start'
        ]
        if ftdi_path is not None:
            cmd = [cmd[0], '-I', f'ftdi_location {ftdi_path}'] + cmd[1:]
        subprocess.run(cmd)

elif args.command == 'serial':
    system = args.system
    print(f"\n==> Serial port for system {system} under {serial_mapping[system]}\n")
    print("\nTo exit press Ctrl + C\n")
    subprocess.run(['flterm', serial_mapping[system]])

elif args.command == "ddb":
    systems = []
    if args.system == 'all':
        systems = [system for system in ftdi_mapping.keys()]     
    else:
        systems = [args.system]

    expeirments_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'experiments')
       
    for system in systems:
        scope_ip = scope_ip_mapping[system]
        scope_ctl_port = scope_controller_ports[system]
        scope_ctl_host = args.ctl_host

        with open(os.path.join(expeirments_path, f"device_db_{system.lower()}.py"), 'w') as f:
            f.write(device_db_template.format(
                core_ip=ip_mapping[system],
                system=system,
                ctl_host=args.ctl_host,
                corelog_ctl_port=corelog_controller_ports[system],
                moninj_proxy_port=moninj_proxy_ports[system],
                moninj_ctl_port=moninj_controller_ports[system]
            ))
            if scope_ip is not None and scope_ctl_port is not None:
                f.write(scope_template.format(
                    ctl_host=scope_ctl_host,
                    scope_ctl_port=scope_ctl_port,
                    scope_ip=scope_ip))

elif args.command == "session":
    assert args.system in ['A', 'B', 'C', 'D', 'E', 'F'], "Invalid system, only A-F are allowed, one at a time"

    master_cmd    = [
        sys.executable, 
        "-u", "-m", 
        "artiq.frontend.artiq_master",
        "--device-db", f"device_db_{args.system.lower()}.py",
        "--bind", "'*'"
    ]
    ctlmgr_cmd    = [
        sys.executable,
        "-m", 
        "artiq_comtools.artiq_ctlmgr",
        "--server", args.master_ip
    ]

    with subprocess.Popen(master_cmd,
                          cwd=os.path.join(os.path.dirname(os.path.realpath(__file__)), 'experiments'),
                          stdout=subprocess.PIPE, universal_newlines=True,
                          bufsize=1) as master:
        master_ready = False
        for line in iter(master.stdout.readline, ""):
            sys.stdout.write(line)
            if line.rstrip() == "ARTIQ master is now ready.":
                master_ready = True
                break
        if master_ready:
            with subprocess.Popen(ctlmgr_cmd):
                for line in iter(master.stdout.readline, ""):
                    sys.stdout.write(line)
        else:
            print("Master failed to start, exiting.")



else:
    print("Invalid command")
    exit(1)
